#include "DBoW3/DBoW3.h"
#include <iostream>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <string>
#include <vector>

int main() {
  std::cout << "1. reading database" << std::endl;
  DBoW3::Vocabulary vocab("./vocabulary.yml.gz");
  // DBoW3::Vocabulary vocab("./vocab_larger.yml.gz");  // use large vocab if
  // you want:
  if (vocab.empty()) {
    std::cerr << "Vocabulary does not exist." << std::endl;
    return 1;
  }
  std::cout << "reading images... " << std::endl;
  std::vector<cv::Mat> images;
  for (int i = 0; i < 10; i++) {
    std::string path = "./data/data_tum/" + std::to_string(i) + ".png";
    images.push_back(cv::imread(path));
  }

  std::cout << "2. detecting ORB features ... " << std::endl;
  cv::Ptr<cv::Feature2D> detector = cv::ORB::create();
  std::vector<cv::Mat> descriptors;
  for (cv::Mat &image : images) {
    std::vector<cv::KeyPoint> key_points;
    cv::Mat descriptor;
    detector->detectAndCompute(image, cv::Mat(), key_points, descriptor);
    descriptors.push_back(descriptor);
  }

  // NOTE: in this case we are comparing images with a vocabulary generated by
  // themselves, this may lead to overfit.
  // 这里我们用它们生成的字典比较它们本身的相似性，这可能会产生过拟合

  std::cout << "3. comparing images with images "
            << std::endl; // 图像与图像比较
  for (int i = 0; i < images.size(); i++) {
    DBoW3::BowVector v1;
    vocab.transform(descriptors[i], v1);
    for (int j = i; j < images.size(); j++) {
      DBoW3::BowVector v2;
      vocab.transform(
          descriptors[j],
          v2); // transform
               // 计算出词袋描述向量,每个向量中元素的值要么是0，表示图像i中没有这个单词；要么是该单词的权重
      double score = vocab.score(v1, v2); // p296式(11.9)计算L1范数
      // 输出一幅图像与另外一幅图像之间的相似度评分
      std::cout << "image " << i << " vs image " << j << " : " << score
                << std::endl;
    }
    std::cout << std::endl;
  }

  // 把图片计构成一个数据库，再与另一张图片比较
  // or with database 图像与数据库比较
  std::cout << "4. comparing images with database " << std::endl;
  DBoW3::Database db(vocab, false, 0); // 定义数据字典库
  for (int i = 0; i < descriptors.size(); i++) {
    db.add(descriptors[i]); // 添加所要查询的图片的描述子
  }
  std::cout << "database info: " << db
            << std::endl; // 输出database info(数据库信息)
  for (int i = 0; i < descriptors.size(); i++) {
    DBoW3::QueryResults ret;
    db.query(descriptors[i], ret, 4); // max result=4
    std::cout << "searching for image " << i << " returns " << ret << std::endl
              << std::endl;
  }
  std::cout << "done." << std::endl;
}
